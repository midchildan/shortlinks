// Code generated by go-bindata.
// sources:
// .build/assets/close.svg
// .build/assets/edit.css
// .build/assets/edit.html
// .build/assets/edit.js
// .build/assets/index.js
// .build/assets/links.css
// .build/assets/links.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _closeSvg = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8e\xc1\x8a\x84\x30\x0c\x86\x5f\x25\xe4\xbe\x69\x9b\x62\xcd\x2e\xd6\xc3\x9e\xdd\x87\x58\x50\x5a\xc1\x19\x65\x2c\x56\xe6\xe9\x87\x56\x2f\x3f\xe1\xfb\xbf\x84\x74\xfb\x11\xe0\x7c\x2c\xcf\xdd\x63\x4c\x69\xfb\x51\x2a\xe7\x4c\xd9\xd2\xfa\x0a\x8a\xb5\xd6\x6a\x3f\x02\x42\x9e\xc7\x14\x3d\x5a\x87\x10\xa7\x39\xc4\x74\xcd\xc7\x3c\xe5\xdf\xf5\xf4\xa8\x41\x83\x75\x60\x1d\xf6\xdd\xf6\x9f\x22\x8c\x1e\xff\x58\xa8\x81\x6f\x72\x3c\xb0\x23\x2b\xd0\x52\x03\x46\xc0\x34\x24\x52\x79\x25\xed\x2d\xdd\xdc\x5c\x5e\xdd\x58\x98\x0c\x43\x89\xc1\x08\xb0\x26\xc3\x8b\x94\x4b\x35\x0a\xff\xaa\x65\x6d\xc0\xc8\x1b\x55\xdf\x95\x87\xfb\x4f\x00\x00\x00\xff\xff\xe5\x79\xbd\x91\xd8\x00\x00\x00"

func closeSvgBytes() ([]byte, error) {
	return bindataRead(
		_closeSvg,
		"close.svg",
	)
}

func closeSvg() (*asset, error) {
	bytes, err := closeSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "close.svg", size: 216, mode: os.FileMode(420), modTime: time.Unix(1605116866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xdf\x6e\xe2\x3c\x10\xc5\xef\xbf\xa7\xb0\xca\x45\x41\xc2\xa9\xa1\x85\x7e\xd8\xd2\x3e\xc4\xde\xed\xa5\xe3\x4c\xc2\xa8\x8e\xc7\xb2\x1d\x08\x8d\x78\xf7\x55\xfe\x40\xb3\xdb\xae\x56\xab\x08\x14\xec\x1f\x9e\x99\x73\x8e\x73\x2a\x2e\x5d\xae\xcd\x5b\x15\xa8\x71\x85\x5c\x94\x65\xa9\x4a\x72\x89\x97\xba\x46\x7b\x91\x8f\xdf\xb5\x85\xb3\xbe\x3c\xae\x59\xd4\x2e\xf2\x08\x01\x27\x22\xe2\x3b\xc8\x97\xad\x6f\xc7\x9f\x67\xc0\xea\x98\xe4\xb3\x10\xd7\x92\x42\xdd\x25\x68\x13\xd7\x16\x2b\x27\x0d\xb8\x04\xe1\xba\xc8\x75\xe8\xce\x58\xa4\xa3\xdc\xef\xfa\xff\xd5\x3a\x54\xe8\xa4\x60\xba\x49\xa4\x3c\x45\x4c\x48\x4e\x06\xb0\x3a\xe1\x09\xae\x8b\x26\xd8\xee\x5f\xba\x79\xfe\xa2\x1b\x35\x55\x14\xc2\xb7\xca\xeb\xa2\x40\x57\xc9\xed\xce\xb7\xca\x90\xa5\x20\x17\x87\xc3\x41\xe5\x14\x0a\x08\x3c\xe8\x02\x9b\x28\x5f\x7c\x3b\xad\xc8\x8d\x6f\x59\x24\x8b\x05\x5b\x18\x63\x14\x35\xc9\xa2\x03\xe9\xc8\x81\xca\xa9\xe5\xf1\xa8\x0b\x3a\x4b\xc1\xb6\xbe\x65\x7b\xdf\xb2\x50\xe5\x7a\x29\xd6\xc3\x93\x6d\x57\xc3\x0c\xb2\x24\xd3\xc4\xee\xf3\x91\xe2\x50\x8e\x80\xe4\x67\xc8\xdf\x30\x71\x74\xbe\x49\xdc\x5b\x6d\xe0\x48\xb6\x80\xd0\x4d\x5d\x16\x45\x71\x43\x6b\x7a\xff\x23\x61\x6a\xdf\xfd\x32\xe4\x38\xfd\x6e\x2f\x3e\xe9\x3d\x33\xc8\x42\x99\x66\x32\x6e\x37\xbe\x55\x29\x68\x37\x19\x32\xbc\xf6\xa6\xb2\xad\x10\x75\x64\xa0\x23\x70\x74\x9c\x9a\xa4\xee\x7b\x32\x1a\x6d\xe1\xc7\x52\xac\x3e\xd6\x38\x05\xec\x2b\x26\xf2\x6c\x0c\xc1\x4d\xe9\x9c\x52\xa2\x9a\xf7\x85\x3f\xab\x7e\xdb\x0d\xbd\x87\x7f\x35\x65\x18\x3a\xb3\xe8\xde\x66\x49\xe6\x93\x28\xe5\xbe\x7f\x46\xa4\x6c\xcc\x97\x08\xc0\x2c\x0a\x03\xfa\x4d\xdf\x44\x15\x87\x72\x14\xaa\x00\x43\x41\x0f\x72\xf4\xe6\x8f\x58\x76\x74\x69\x26\xff\x48\x4e\x91\xe8\x9b\xec\x3f\x82\xf5\x97\x6a\xc6\x97\x96\x74\x92\xc3\x6c\xd7\x85\xb1\xb1\xbb\x07\x5f\xe7\x91\x6c\x93\x40\x25\xf2\x52\xa8\x01\x91\x42\x8d\x6a\xc8\x7b\x92\x07\x25\x3e\xc6\xc0\x5a\x57\x20\x9b\x60\x97\x0f\x4f\xf1\xc9\x58\x8a\x90\xc5\x53\xf5\xb0\x9a\x43\xf7\x1a\xa3\x0d\x77\x37\x3e\x88\x00\x1e\x74\x92\x8e\xa6\xb7\xf9\xde\x78\xd5\xff\xf7\x2d\xeb\xbf\x94\x69\x42\xa4\x20\x3d\xe1\x70\xc8\x2c\x29\xe4\xb5\xc1\x74\x99\x72\x62\x9a\x1c\x0d\xcf\xe1\x1d\x21\x2c\x45\xf6\xfa\xba\x66\x62\xcd\x44\xb6\x79\xdd\xad\xd9\x66\xa5\x26\x5a\x0a\x35\x1d\xc5\xe1\x04\x2e\xc5\x9b\xc2\x36\x66\x27\x8c\xdd\x1d\xcb\x9e\x7f\x07\xd1\x1d\x21\xe0\xa8\xa3\x3c\xd2\x09\xc2\x8c\xde\x5f\xff\xfb\x19\x00\x00\xff\xff\x56\xb7\x20\x4a\xe0\x04\x00\x00"

func editCssBytes() ([]byte, error) {
	return bindataRead(
		_editCss,
		"edit.css",
	)
}

func editCss() (*asset, error) {
	bytes, err := editCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.css", size: 1248, mode: os.FileMode(420), modTime: time.Unix(1605116867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xb1\x72\xe3\x20\x10\xed\xfd\x15\x7b\xd4\x67\xa3\x99\xbb\xe2\xc6\x07\x4a\xe1\x78\x52\x26\x93\x71\x93\x12\xa3\x95\x21\x41\x82\xc0\xca\x89\xfe\x3e\x83\x50\x6c\x65\xd2\x85\x86\xdd\x7d\xec\x7b\x8f\x05\xf1\xeb\xf6\x7e\x77\x78\x7a\xd8\x83\xa1\xce\xd5\x2b\x51\x36\x00\x61\x50\x35\x39\x00\x10\x64\xc9\x61\x7d\xe7\x05\x2f\x51\xa9\x76\x48\x0a\x0c\x51\x58\xe3\xeb\x60\xcf\x92\xed\x7c\x4f\xd8\xd3\xfa\x30\x06\x64\xa0\x4b\x26\x19\xe1\x3b\xf1\x4c\xfb\x1f\xb4\x51\x31\x21\xc9\x81\xda\xf5\x3f\xc6\x67\x22\x67\xfb\x17\x30\x11\x5b\xc9\x78\xe2\xd8\x58\xda\xe8\x94\xd8\x04\xe6\x15\xd1\x49\x96\x68\x74\x98\x0c\x22\x5d\x01\x1a\x03\xce\xfc\xb9\xe1\x3b\x5d\x76\x97\xb6\x9c\xb7\xbe\xa7\xb4\x39\x79\x7f\x72\xa8\x82\x4d\x1b\xed\xbb\xdc\x72\xd3\xaa\xce\xba\x51\x3e\x2a\x87\x6f\x6a\xdc\xfe\xad\xaa\xdf\x7f\xaa\xea\x67\xd2\x82\x7f\x8e\x4c\x1c\x7d\x33\xce\x6e\x5a\x1f\x3b\x50\x03\x79\xed\xbb\xe0\x90\x50\x32\xdf\xb6\xb3\x57\x00\xd1\xd8\x33\xd8\x46\xb2\xa3\x8a\x97\xe2\xa2\xac\x5d\x62\xb5\xe0\x8d\x3d\x2f\x40\xdb\x87\x81\x16\x16\xd8\x74\x74\x88\x8e\x41\x70\x4a\xa3\xf1\xae\xc1\x28\xd9\xbe\x27\x8c\x40\x06\x61\x88\x0e\xc8\x43\x32\x3e\x12\xf6\x99\x71\xe2\xb8\xb8\x58\x0a\x5c\xb5\xbb\xf0\x45\x5b\xf0\x7c\x99\x7a\x55\x92\xa4\xa3\x0d\x04\x29\xea\xeb\xb3\x3d\x4f\x66\x0b\x52\x46\x52\x26\x21\x78\xf9\x56\x1f\x01\x00\x00\xff\xff\x1e\x7c\x18\x18\x6e\x02\x00\x00"

func editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_editHtml,
		"edit.html",
	)
}

func editHtml() (*asset, error) {
	bytes, err := editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.html", size: 622, mode: os.FileMode(420), modTime: time.Unix(1605116866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x48\x78\x40\x40\x22\x0c\x9d\xb4\x2f\x45\x74\x42\x91\xa6\xbe\x2b\x0e\xed\xa5\x48\x02\x6c\x17\xdd\x62\x41\x8b\x23\x89\x6b\x8a\xa4\x49\x2a\xb1\xd7\xd6\x77\x5f\x50\x92\x6d\x39\x76\x9b\xee\x3e\x44\xe1\x0c\x87\xbf\xf9\xc3\xdf\x0c\xfd\xc8\xdd\xb1\x30\x55\x82\xf3\x5a\x67\x41\x1a\x8d\x4b\xb2\x2c\xd9\x2c\xdd\xc8\x39\x59\x3a\x08\xb5\xd3\xc7\xc2\x64\x75\x05\x3a\xb0\x59\x0d\x6e\x71\x0f\x0a\xb2\x60\x1c\xce\x49\x93\x94\x6c\xc6\x7f\xfe\xc8\xb5\x52\xfd\xa9\xec\x87\x87\x32\x07\x3c\xc0\x58\x41\x94\xd6\x27\xbc\x1f\x9c\xa1\x13\xca\xc9\x32\x67\x3e\x2c\x14\x30\x0f\xe1\xb3\x33\x16\x5c\x58\xe0\x09\xe5\x14\x21\xd2\x34\x04\x0b\x53\xad\x56\xf1\x9b\x2e\x1b\x42\x92\x98\xf2\xbc\x74\xc9\xd1\x4e\xce\x51\x9b\x6f\x91\xc9\x72\xbd\x3c\x9e\x60\xde\x6d\x57\x69\x28\xa5\x4f\xe2\x87\xcd\x4b\x97\xf2\x6e\x29\x8c\x86\xff\x68\x9f\x7e\xfd\xd6\xc9\xe0\x9c\x71\xbd\x82\x33\xa3\x95\xe1\x62\x08\x1c\xa1\x74\xca\x99\x03\x6f\x8d\xf6\xf0\x00\xf3\x40\x67\x29\x67\x3e\xf0\x50\xfb\xa4\x5a\x23\xb2\xdc\xb8\x31\xcf\xca\x6d\x9c\x96\x2c\x2d\xd6\x74\x46\x1a\xd2\xb4\xd8\xad\xaf\x21\x78\xb5\x71\xbf\x7f\x5a\x6f\x2a\xac\x71\x44\x68\x26\xcc\x3a\x13\x4c\x58\x58\x60\x46\xbf\x37\x1a\xb6\x50\x9c\x2c\x87\xd9\x31\x5b\xfb\x12\x73\x92\xf4\x08\x71\xaf\x49\x76\x01\xc6\xbb\xc1\xac\x11\x36\x01\xbd\x08\xf1\x24\x43\xf9\x01\xb8\x80\x21\x0a\xad\x7a\x9c\x79\xe9\xe2\x0d\xdf\xc1\xac\x06\x1f\x3a\xbb\x76\xfb\xfb\x80\x1e\xb4\xf8\xdf\xfd\xed\xff\xf7\x83\xda\xba\xc2\xe8\xc6\xe8\x00\x3a\x9c\x3f\x2c\x2c\x20\x7a\x84\xb8\xb5\x4a\x66\x3c\xda\x8f\xfe\xf0\x46\x27\x59\xc9\x9d\x87\x90\xd6\x21\x7f\x83\x48\x32\x88\x46\x0b\x1c\xf1\x99\x0f\x4e\xea\x42\xe6\x0b\xcc\xc9\x0b\xf1\xec\xc7\xb2\x81\x7a\x5e\x9b\x5e\x98\x34\x98\x24\x25\xbb\x83\x59\x9a\xc7\x0e\x68\xbb\x62\x0b\xd3\xb6\x40\xc7\x4f\x0d\x4f\xc7\x5f\x3e\x7d\xfc\x10\x82\xed\xcb\x94\x54\xcc\x58\x68\x8d\xe8\xc9\xc5\x1a\x1f\x47\xc3\x1c\x57\x84\xec\x14\xe2\xcb\x79\x7f\x0a\xc4\xf9\x2f\x32\x94\x88\xa2\x5d\x34\xd4\xb6\x60\x01\x61\xe0\x7d\x43\xaa\x75\x64\x18\xfd\x77\xfc\x80\xe8\xa4\xb5\xb5\xc6\xbf\x60\xfc\xf9\xf6\xbe\xb3\x6e\x08\x9e\x97\x6e\xb5\x8a\xdf\x6d\xa7\x16\xe6\xa5\x46\x8d\x8a\x2c\xb5\x31\xac\x77\xa6\xd6\x42\xea\xe2\x46\x49\xd0\xe1\x0e\xb2\x80\x49\x22\x4c\x15\xa7\x06\xb6\x14\x55\xdc\x15\x52\x9f\x07\x63\x11\x7d\x92\x5a\x98\x27\x26\xb5\x06\xf7\x01\x64\x51\x86\xd1\xeb\xf3\x8c\x95\xdd\xf2\xd5\x19\xb2\x73\x44\x1a\x3a\xd9\x77\x85\x15\x7b\xe4\xaa\x86\xd5\x0a\x21\xc2\x82\x93\x15\x26\x49\x76\x92\x86\xd3\x53\x1c\xd2\x8c\x6a\x4c\x68\xf6\xd6\xb1\x4c\x71\xef\x3f\x4a\x1f\x18\x17\x02\xa3\x47\xe9\x11\xb9\x1a\xaa\x1d\x54\xe6\x11\xfa\x1d\xd2\xd0\xc1\x08\xcd\xc8\x32\x63\xd6\xc1\x23\xe8\xf0\x1e\x72\x5e\xab\x98\x4a\x96\x2a\xd3\x11\x93\x59\x1e\x4a\xcd\x2b\x60\xbe\x9e\x74\xec\xc3\x97\x84\x79\xab\x64\xc0\x68\x84\xc8\xd7\xcb\x6f\x5d\xfd\x0e\x87\x1b\x39\x17\xef\x06\xa3\x11\xb7\x72\x54\x3b\x35\x42\x67\x19\xd9\x74\x0c\x5e\xd6\x4e\x5d\x15\x0d\xe9\x07\xc3\xf6\x0a\x04\x05\xb2\x14\x69\x4b\x7b\x1b\xfb\x02\x0b\x92\xc8\x1c\x0b\x66\xa6\x44\xe6\x18\x52\xc1\x9c\xa9\x03\x74\xe5\xaa\x53\x60\x31\xce\xe8\x3d\x11\x29\x30\x6f\x6a\x97\xc1\xef\xa5\xf1\xa1\xd5\x01\xab\x9d\x3a\x3d\xc5\xa5\xf4\xc1\xb8\x05\x73\x60\x15\xcf\xe0\x3e\x44\x76\x2c\x1b\x7a\xa4\x6b\xa5\x28\x1a\x81\x90\x61\x84\xce\x6a\x42\x21\x45\x71\x11\xff\xa3\x93\x54\xbc\x15\x67\x70\xb5\xa9\x8b\x71\xb2\x90\xfa\x0c\xe8\x94\x05\x98\x87\xbe\xb7\x53\x84\xe8\xf4\x40\xe5\xf3\x3a\x9b\x22\xb2\xb3\xd5\xde\x95\x92\x3a\xea\x45\xda\x92\x07\x23\x1e\x85\x38\x7d\xae\x43\x70\x72\x52\x47\xe2\x96\x0e\x72\x44\x21\x6e\x0c\x3d\x45\xcf\xdc\x5a\xd0\xe2\xa6\x94\x4a\x60\x11\x03\xee\x61\xbc\xe5\x1a\x11\x0a\xcf\xdd\x95\x3a\xb4\xea\x21\xce\xc5\xbf\x53\xcd\x1f\x65\xc1\x83\x71\xac\xf6\xe0\xae\x8b\xf8\x26\x4a\x2d\x60\x7e\x9b\x63\xf4\x89\x67\x52\x07\xe3\x4b\x44\xde\xa2\xdf\xea\x57\xaf\x2f\xdf\x9c\xdf\xa0\x2b\x74\x13\x9c\x3a\xbf\x41\xcf\xa2\x88\x61\xf6\x7d\x30\xa5\x28\x38\xae\x7d\x6e\x5c\x85\x28\xf2\x19\x57\xf0\x2b\xbe\x24\x88\xd0\x02\x42\xf7\x46\xb7\x74\x8f\xf9\xbe\xe3\x1e\xae\xb5\x18\xcf\x63\x4c\x58\xd0\x0b\x2a\xe8\x25\x21\x0d\x28\x0f\xf1\x19\x49\xda\xc5\x0c\x8b\x6e\xcc\xc7\x67\x85\x56\xfb\x2d\xf3\xb7\x68\xbb\x25\xec\xd1\x80\xb1\xbd\x32\x45\x28\x99\xe0\x96\x71\x19\x89\x2c\x5e\xcf\x91\xf7\xe3\x8f\xe3\x87\x31\xa2\x07\x08\x8d\xf7\x59\x5c\x50\x41\x96\xc5\x90\xc5\x05\x49\x0a\x66\xa6\xab\xd5\x0c\x17\x83\x64\xf4\x30\x99\x1f\x97\xf0\x82\xc4\x81\x31\xdb\x69\xe2\xe7\x2c\x4c\x0e\xb1\xb0\x63\x5b\xb2\xc7\xc2\x8e\x9d\x7d\x1b\xef\x50\x28\x29\x76\x71\xc7\x77\x77\xb7\x77\x57\xc7\xe8\x2c\x4b\x76\xef\xbd\xd8\xce\xbf\xef\xdf\x7b\x43\x6d\x0b\x3f\xc3\xa8\xdd\x24\x74\xba\x96\xff\x95\x55\x16\x11\xea\xb6\xb2\xf2\x88\x50\xb5\x91\x6b\xa7\x10\xa1\x61\xf0\x03\x92\x2c\x73\x4c\x92\x7e\xbc\x72\x21\xc6\x71\x86\xc5\xa4\x40\xc7\x47\xc6\x81\x97\x7f\x02\xa2\x39\x3d\xb9\x24\x89\x3d\x60\xe1\xeb\x49\x25\x03\xa2\x47\xbc\x35\x51\x07\x4c\xa6\xb0\xa8\x2d\xa2\x93\xef\x1a\x58\xee\x03\xfc\xc8\x20\x2b\xb9\x2e\x36\x16\xee\x90\x85\x92\xd9\x14\xd1\xaa\x35\xf8\x07\x34\xde\x30\xb4\x80\x83\x63\xf6\x67\x59\xf9\xea\xe2\x22\x4d\xc5\xe9\xe9\xba\x2d\xd2\xa2\x9b\xaf\x71\x6e\xc6\x09\x4a\x15\xcb\x4d\x56\x7b\x4c\xe8\x04\x13\xd2\xf4\x3d\xb9\xd1\x36\xa4\xfd\x2b\xcc\x6a\x85\x0b\xd3\xbd\xac\x47\x7f\x05\x00\x00\xff\xff\xb1\x60\xc0\x25\xf8\x0b\x00\x00"

func editJsBytes() ([]byte, error) {
	return bindataRead(
		_editJs,
		"edit.js",
	)
}

func editJs() (*asset, error) {
	bytes, err := editJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.js", size: 3064, mode: os.FileMode(420), modTime: time.Unix(1605116871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdb\x6e\x1b\x37\x10\x7d\xd7\x57\x4c\x50\x23\xe4\x22\x6b\x4a\x4e\xdf\x2c\xa8\x45\x22\xbb\xe8\x25\xad\x0b\xdb\x7d\x28\x8a\xa2\x60\x76\x67\x25\x46\x5c\x72\x41\x72\x2d\xab\x8e\xfe\xa0\x1f\xd0\xef\xeb\x97\x14\xbc\xec\x45\x8a\xed\x16\xe8\x4b\xfd\x60\x2d\x87\xc3\x99\x73\x38\x37\xd2\xaa\x55\x85\x13\x5a\xd1\x0c\x1e\x26\x93\x3b\x6e\xe0\xa4\x32\x35\x2c\xe0\x84\x92\x4a\x9b\x9a\x64\xf9\x04\x00\xe0\xa4\xa8\x9b\x28\xfd\xac\xa8\x9b\x41\x2a\x6d\x27\x95\xb6\x97\xb6\x46\x26\x69\x6b\x64\x27\x2d\x74\xb3\xfb\x0e\x77\xb0\x00\xc5\xef\xc4\x8a\x3b\x6d\x58\x6b\xd1\xbc\x59\xa1\x72\x4c\xa8\x12\xef\xaf\x2a\x4a\xbe\xe7\x85\x50\x4e\xdb\x35\xc9\xe0\x8b\x05\xcc\xe0\x4b\x20\x7f\xfd\xf1\xe7\xe9\x92\xc0\x39\x90\xa5\x33\xf2\x74\x49\xa2\x45\xc9\xad\xfb\xc9\xc8\x79\xc2\x8d\xb0\x80\x9e\x8e\xe2\x35\x7a\x4a\x00\x06\x5d\x6b\x14\x9c\xd0\x52\x17\x6d\xed\x7d\x15\x06\xb9\xc3\x4b\x89\x7e\x15\x35\xb3\xf9\x64\x9f\xec\x18\xb4\xe2\xf7\x03\x5b\xd1\x4e\xdc\x2b\x9c\x67\x56\x99\x9a\xad\xd0\xd1\x59\xe6\x7f\xde\xea\x56\x95\x42\xad\x96\x52\xa0\x72\xd7\x58\x38\x9a\xcd\x27\x10\xd5\x0a\x6b\x29\xa9\xb9\x59\x09\x75\xea\x74\x43\x72\xd8\x0a\x55\xea\x2d\x13\x4a\xa1\xf9\x1a\xc5\x6a\xed\xa6\x9f\xc3\x69\xb0\xcd\xd6\x71\xfd\x7a\x84\xc7\xe3\xfb\xca\xe8\x7a\x8c\xa8\x35\x62\x00\xd5\x70\xe3\x7c\x14\x5a\x23\x98\x6d\xdf\x5b\x67\x84\x5a\xd1\xb3\x8c\xd9\x46\x0a\x47\xc9\x94\x04\x34\xe9\x1e\x82\xf6\x2f\x67\xbf\x0e\x0e\xa4\xe6\xe5\xe3\x74\xbd\xeb\x10\xaf\x88\x80\x4a\x5d\x70\xaf\xc2\x1a\xee\xd6\xe1\xde\x02\x4d\xc6\x3f\xf0\x7b\xfa\x10\x62\xd2\x1a\x79\x0e\x64\xca\x1b\x31\x6d\x8d\x9c\x12\x78\x15\x8e\xc7\x80\x95\xdc\xf1\xdb\x5d\x83\xe7\x40\x3e\x58\xad\xc8\x04\x60\x9f\x31\x2e\xb7\x7c\x67\x87\x4c\xf4\x5a\x11\x03\x80\xa8\x80\xbe\xf0\x02\xa6\x37\x9d\x0c\xc0\xae\xf5\xf6\xd2\x18\x6d\x82\x2e\x43\xff\x19\xa0\xf8\xbf\xc8\x33\xae\xf6\x93\xf0\x13\x42\xa7\x5b\xe7\xc9\x84\x13\x61\x91\xa7\x03\x01\x34\x2c\x92\xc6\xcb\x97\xf1\x83\x79\xe1\xc7\x8f\x40\xc8\xbc\x4f\x6a\x76\xc7\x25\x6d\x8d\xcc\x58\xa5\x8b\xd6\xd2\xe4\xb3\x35\xf2\x42\x94\xcb\x35\x57\x2b\x8c\xb2\xbd\x8f\x5f\xbc\x5d\x8f\xf5\x9d\x50\x9b\xe3\xe4\xcc\xc1\x9a\x62\xb8\x6a\x19\x34\x48\x7f\x61\x73\x8f\xdc\xb3\xb7\xa6\x80\x17\x0b\x20\xa4\xa3\x1f\x35\xbd\xf8\x95\xff\x0e\xee\x00\xa5\xc5\x83\xfd\x3e\x54\xda\x88\x95\x50\x23\x5d\x6f\xd8\x57\x33\x73\x78\xef\x28\x21\x59\x38\xc5\x0c\xd6\xfa\x0e\x97\x92\xfb\x7c\xad\xda\x62\xd3\x6d\xf0\xb2\x4c\x52\x29\xd4\xc6\xe7\x52\x82\xcc\x43\x8d\x3f\x51\x55\x84\x93\xac\x33\xe0\x9c\xa1\x64\x6d\xb0\x22\xb9\x47\x91\xc4\xc1\xfd\xb0\xe4\x4d\x83\xaa\xbc\xd5\xd4\x63\x1b\x9c\xac\x9f\x75\x62\x1b\xae\x06\x3f\x3d\xd0\xb5\x72\x64\xec\x25\xb5\x9e\xa7\x3d\x85\xfb\x08\x95\xea\x0c\x57\x36\x34\xbe\x1c\x88\x2d\xb8\xc4\x9f\xe9\x59\x96\x58\xaf\xd0\xdd\xa0\xc4\x54\x26\xcc\xa2\x7b\xcb\x2d\xbe\x51\xe5\xe5\xbd\xf3\x78\x78\x6a\x0a\x39\xcc\x72\x18\x16\x67\xa3\x6a\xee\x53\x77\x9c\x0f\x35\x5a\xcb\x57\xa9\x5f\xfd\x53\x6c\x62\x14\x8e\x29\xc7\x88\x45\x32\xd8\x5d\x4c\x32\x73\x79\x7d\x7d\x75\x7d\x0e\x3e\xb5\x3a\x4f\xff\xe9\x26\x3a\x2e\x6b\x51\xe2\x85\xe1\x5b\x34\x9f\xb6\x8f\xe7\xed\xcc\x0e\xec\x8c\xeb\xe7\xf1\x46\x94\x06\x4a\x57\x82\x19\x73\x46\xd4\xb1\xd4\x7c\x8d\x84\xed\x45\x37\x0f\xba\x42\x19\x1a\x41\xc8\xf9\xb4\x1b\x1a\xa5\x0c\x5c\x07\xfc\x07\xa6\xba\xf3\x7e\xb8\xb1\x8a\x97\xf8\x8d\xa2\xaf\x67\xb3\xec\x93\x4a\xeb\x15\xae\x5a\x37\x68\x04\x5a\xa1\xf5\x6b\x45\x89\x6d\xdf\xd7\xc2\x91\x7c\x60\x95\xc2\x8c\xac\x31\x78\x87\xca\x5d\x60\xc5\x5b\x99\x46\xc6\xbf\xeb\xba\x5d\xe7\x7a\xf2\x5a\x8e\xbb\xb2\x8b\x4d\xf7\xc7\xab\x9b\xdb\x34\x3b\xfd\xd1\xe7\x1b\x35\x9c\xc3\xb7\x37\x57\x3f\xb0\x38\x4f\x44\xb5\xa3\x0f\xe9\x94\xff\xbf\xcf\x0e\x5b\x3a\xfc\x3f\x7a\xfa\x7c\xf0\x10\xd6\x83\xfd\xe3\x60\x3f\x63\x76\x34\x0e\x86\x29\x30\x4c\x8b\x14\x9f\xb8\x1f\x16\xa3\x31\x11\xa8\x98\xa2\xdf\xb7\xba\x35\x05\xfe\xb6\xd6\xd6\x8d\xd5\x8e\x52\xcd\xc3\xb3\x4e\x9b\x1d\x33\xd8\x48\x5e\xe0\x8d\xe3\x0e\xe9\xc3\x3e\x07\xd5\x4a\x99\x03\x99\x62\x29\x5c\x1f\xa5\x9e\x41\x37\x5d\x46\x23\xa5\xa3\x93\xa6\x90\xcf\x86\x90\x21\x3e\x1b\x37\xb8\x2b\xf5\x56\x91\xfc\xa0\xe6\x52\x37\xf0\x0a\x0d\xb7\x0e\x9f\xde\x2e\x82\xe0\x78\xdf\x7b\xf0\xa5\x10\x34\xa4\x28\x36\x8f\xa4\x7b\x9f\xa4\x84\x0c\x6f\xa3\x58\x1c\x31\x1e\xc7\x43\x34\x00\x4f\x4f\x25\x5e\x96\x97\xbe\x54\xde\x09\xeb\x50\xa1\xa1\x24\x3e\xd2\x48\x9e\x5e\x6b\xd9\x7c\x12\x3f\xfc\xc9\x63\x4b\xfe\x7d\x13\x8a\x62\x9f\xf9\x9f\xbf\x03\x00\x00\xff\xff\xd1\x8f\x2c\x94\xf3\x0a\x00\x00"

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2803, mode: os.FileMode(420), modTime: time.Unix(1605116866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x41\x6e\xe3\x30\x0c\x45\xf7\x73\x0a\x03\x59\x64\x33\x0a\x94\x38\x28\x5a\xfa\x16\xbd\x01\x63\x49\x36\x11\x46\x14\x24\xba\xb6\x2b\xf4\xee\x45\x90\xb8\x40\x16\x5c\x10\x7c\x7c\xf8\xff\x22\x6e\xad\x17\xec\xaf\x43\x96\x29\x3a\xd8\x85\x10\xba\x20\x51\x4d\xc0\x1b\xf1\x0a\xfb\x4f\x64\x3f\xe3\xba\xff\xdf\x14\x8c\xc5\x14\x9f\xe9\x49\x14\xfa\xf6\x70\x3e\xa5\xe5\xb1\xce\x9e\x86\x51\xa1\xb5\xf6\xe7\xc0\x14\xaf\xa5\xce\xe4\x74\x84\x77\x6b\xd3\xd2\xdd\x30\x0f\x14\xc1\x36\x38\xa9\x3c\x81\x06\x6b\x2f\x2c\x19\x76\xf6\x23\x74\xea\x17\x35\xce\xf7\x92\x51\x49\x22\x44\x89\xfe\x0f\x84\x51\xbe\x7c\xae\x92\xb0\x27\x5d\xc1\x1e\xde\xb6\xd3\x21\x4c\xcc\x66\xca\xbc\xb9\x9c\x73\x0f\x57\x19\xd1\xc9\x0c\xc7\xb4\x34\xf7\xb1\xcd\xbd\xdc\xf6\x36\x1e\x37\xbe\x6d\xdb\x67\x3a\x73\x11\x55\xb9\xc1\xd9\xa6\x65\xe3\x26\xae\x09\x9d\xa3\x38\x80\xed\x98\x8a\x9a\xa2\x2b\x7b\xa3\x6b\xf2\x2f\x11\x27\x6e\x98\xea\xab\xe8\x74\x17\xfd\xfb\x0d\x00\x00\xff\xff\xb8\xc8\x00\x8a\x64\x01\x00\x00"

func linksCssBytes() ([]byte, error) {
	return bindataRead(
		_linksCss,
		"links.css",
	)
}

func linksCss() (*asset, error) {
	bytes, err := linksCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.css", size: 356, mode: os.FileMode(420), modTime: time.Unix(1605116866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8f\x94\x40\x10\xbd\xef\xaf\x28\x3b\x7b\x5c\x28\x36\x7a\x30\xd8\x8d\x31\xab\xf1\xb2\x89\x66\x33\x1e\x3c\xf6\x40\x01\x1d\x1a\x7a\xa4\x0b\x94\x10\xfe\xbb\x69\x60\xe2\xcc\x98\x98\x58\x97\x4e\xd5\xab\x8f\xf7\x5e\x5a\xbe\xfa\xf8\xe5\xe9\xf0\xfd\xeb\x27\xa8\xb9\xb5\xd9\x9d\x3c\x3f\xa4\x8b\xec\x0e\x00\x40\xb2\x61\x4b\xd9\x67\x07\x69\x0a\x1f\x72\x36\x23\xc1\xb3\xe9\x1a\x2f\x71\x43\xb6\xae\x96\x58\x43\xcd\x7c\x8a\xe8\xc7\x60\x46\x25\x9e\x5c\xc7\xd4\x71\x74\x98\x4e\x24\x20\xdf\x32\x25\x98\x7e\x31\x86\x23\xef\x20\xaf\x75\xef\x89\xd5\xc0\x65\xf4\x56\xe0\xbe\xc8\x9a\xae\x81\xba\xa7\x52\x09\xf4\x18\x32\x1f\xe7\xde\x8b\x15\x0d\xd1\x93\x55\xc2\xf3\x64\xc9\xd7\x44\x2c\xfe\x9e\x0b\x34\x7c\x8a\x58\xba\x8e\x7d\x5c\x39\x57\x59\xd2\x27\xe3\xe3\xdc\xb5\x98\x7b\xff\xbe\xd4\xad\xb1\x93\x7a\xd1\x96\x7e\xea\x29\x7d\x93\x24\x0f\xaf\x93\xe4\x5f\x27\x24\x6e\x8e\xc8\xa3\x2b\xa6\xfd\x62\x61\x46\xc8\xad\xf6\x5e\x89\x95\xe6\xce\x64\xc5\xea\xc7\x6c\xf7\xca\x6e\x5e\xd5\x8f\x17\xe8\x60\xff\x24\x21\xe6\x19\x7a\xdd\x55\x04\xf7\x0d\x4d\x0f\x70\xdf\xbb\x81\x09\x52\x05\x31\x2c\xcb\x55\xa7\xb4\xe6\x7a\x74\x2d\xea\x5d\xf8\x3c\xef\xb3\xf1\xb7\x97\x67\x58\x16\x91\x55\x0e\x43\xb1\xa1\x09\x96\x45\xa2\xce\xe4\xb1\x07\xfc\x9f\x15\x67\x89\xe5\x60\x6d\x34\xf4\x56\x64\xb7\x2d\x61\xed\x35\x49\xbc\x65\x39\xcf\x40\x5d\x71\x29\x46\xe2\xd9\x04\x89\x85\x19\x83\xc3\x9b\xb5\x12\xb7\x2f\xf8\x3b\x00\x00\xff\xff\x59\x5f\xf5\xba\x9a\x02\x00\x00"

func linksHtmlBytes() ([]byte, error) {
	return bindataRead(
		_linksHtml,
		"links.html",
	)
}

func linksHtml() (*asset, error) {
	bytes, err := linksHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.html", size: 666, mode: os.FileMode(420), modTime: time.Unix(1605116866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"close.svg": closeSvg,
	"edit.css": editCss,
	"edit.html": editHtml,
	"edit.js": editJs,
	"index.js": indexJs,
	"links.css": linksCss,
	"links.html": linksHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"close.svg": &bintree{closeSvg, map[string]*bintree{}},
	"edit.css": &bintree{editCss, map[string]*bintree{}},
	"edit.html": &bintree{editHtml, map[string]*bintree{}},
	"edit.js": &bintree{editJs, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"links.css": &bintree{linksCss, map[string]*bintree{}},
	"links.html": &bintree{linksHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

